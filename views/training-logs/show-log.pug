extends ../layouts/dashboard-layout.pug

block content
  .max-w-2xl.mx-auto
    // Card
    div(class="bg-white rounded-2xl shadow-xl p-8 md:p-10")
      // Title
      h1(class="font-serif text-3xl md:text-4xl font-bold text-red-900 mb-4")
        | #{log.logTitle || 'Training Log'}

      // Details stack — Duration big, others smaller
      div(class="space-y-1.5 mb-6")
        // Duration (largest of the details)
        div(class="text-xl font-semibold text-gray-900")
          | Duration: 
          span(class="font-bold") #{log.logDuration} min

        // The rest (slightly smaller)
        div(class="text-sm text-gray-700")
          | Date: 
          span(class="ml-1 text-gray-800")
            = fmt(log.logDate, 'MMM d, yyyy, h:mm a')

        div(class="text-sm text-gray-700")
          | Category: 
          span(class="ml-1 text-gray-800") #{log.logCategory}

        if log.logRelatedBelt && log.logRelatedBelt !== 'N/A'
          div(class="text-sm text-gray-700")
            | Belt: 
            span(class="ml-1 text-gray-800") #{log.logRelatedBelt}

        div(class="text-sm text-gray-700")
          | Intensity: 
          span(class="ml-1 text-gray-800") #{log.logIntensity}

        if log.logIsPrivate
          div(class="text-xs text-yellow-800")
            | (Private Entry)

      hr(class="border-gray-200 my-6")

      // Description
      h2(class="font-serif text-lg font-semibold text-gray-800 mb-2") Description
      p(class="text-gray-800 leading-relaxed whitespace-pre-line mb-8")
        | #{log.logDescription}

      // Actions (replace only the edit link)
      div(class="flex items-center justify-between")
        button(type="button" id="openEditModal"
          class="inline-flex items-center rounded-md bg-red-800 px-4 py-2 text-sm font-medium text-white hover:bg-green-700 transition")
          | Edit Entry
        form(action=`/logs/delete/${log.logId}`, method="POST", onsubmit="return confirm('Delete this entry?');")
          +csrfField()
          button(type="submit" class="inline-flex items-center rounded-md border border-gray-300 bg-white px-3 py-1.5 text-sm text-gray-700 hover:border-red-500 hover:text-red-700 transition")
            | Delete Entry

      // Footer nav
      div(class="mt-10 flex justify-center gap-6 text-sm")
        a(href="/portal/dashboard" class="text-blue-600 hover:underline") ← Back to Dashboard
        a(href="/logs/all" class="text-blue-600 hover:underline") ← Back to All Logs


  // 🔶 Edit Entry Modal
  div#entryModal.hidden.fixed.inset-0.bg-gray-900.bg-opacity-50.flex.items-center.justify-center.z-50
    div(class="bg-white rounded-lg shadow-lg w-full max-w-md p-6 relative")
      button(
        type="button",
        class="absolute top-2 right-2 text-gray-500 hover:text-red-800",
        id="closeEntryModal"
      ) ✕
      div#entryFormContainer.text-center.text-gray-500 Loading form...


  script.
    document.addEventListener('DOMContentLoaded', function () {
      const modal = document.getElementById('entryModal');
      const formContainer = document.getElementById('entryFormContainer');
      const openEditBtn = document.getElementById('openEditModal');
      const closeBtn = document.getElementById('closeEntryModal');

      if (openEditBtn && modal) {
        openEditBtn.addEventListener('click', async () => {
          modal.classList.remove('hidden');
          try {
            const res = await fetch('/logs/edit/#{log.logId}');
            const html = await res.text();
            formContainer.innerHTML = html;
          } catch (err) {
            formContainer.innerHTML = '<p class="text-red-600">Failed to load form.</p>';
          }
        });
      }

      if (closeBtn && modal) {
        closeBtn.addEventListener('click', () => modal.classList.add('hidden'));
        window.addEventListener('click', (e) => { if (e.target === modal) modal.classList.add('hidden'); });
      }

      // 🔁 Reuse the same delegated submit listener as dashboard
      document.addEventListener('submit', function (e) {
        const form = e.target;
        if (form.closest('#entryFormContainer')) {
          e.preventDefault();
          const formData = new FormData(form);
          if (!formData.has('_csrf')) {
            formData.append('_csrf', window.CSRF_TOKEN);
          }
          fetch(form.action, {
            method: 'POST',
            body: formData,
            credentials: 'same-origin',
            headers: { 'X-Requested-With': 'XMLHttpRequest' }
          })
          .then(res => res.json())
          .then(data => {
            if (data.success) {
              modal.classList.add('hidden');
              // simplest + safest: reload this page to show updated values
              window.location.reload();
            } else {
              alert('Error: ' + (data.error || (data.errors||[]).map(e => e.msg).join(', ')));
            }
          })
          .catch(err => console.error(err));
        }
      });
    });
